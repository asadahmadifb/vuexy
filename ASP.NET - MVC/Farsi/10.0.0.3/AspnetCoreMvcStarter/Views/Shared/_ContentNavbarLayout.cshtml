@{
  TempData.Keep();
  Layout = "_CommonMasterLayout";

  TempData["menuHorizontal"] = false;
  ViewData["contentNavbar"] = false;

  @* Display elements *@
  ViewData["isNavbar"] = (ViewData["isNavbar"] ??= true);
  ViewData["isMenu"] = (ViewData["isMenu"] ??= true);
  ViewData["isFlex"] = (ViewData["isFlex"] ??= false);
  ViewData["isFooter"] = (ViewData["isFooter"] ??= true);
  @* ViewData["customizerHidden"] = (ViewData["customizerHidden"] ??= "customizer-hide"); *@


  @*HTML Classes *@
  ViewData["navbarDetached"] = (ViewData["navbarDetached"] ?? "navbar-detached");
  ViewData["menuFixed"] = (ViewData["menuFixed"] ?? "layout-menu-fixed");
  ViewData["navbarType"] = (ViewData["navbarType"] ?? "layout-navbar-fixed");
  @* ViewData["footerFixed"] = (ViewData["footerFixed"] ?? "layout-footer-fixed");
    ViewData["menuCollapsed"] = (ViewData["menuCollapsed"] ?? "layout-menu-collapsed"); *@

  @*Content classes *@
  ViewData["container"] = (ViewData["container"] ?? "container-xxl");
  ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-xxl");
}

@section VendorStyles{ @RenderSection("VendorStyles", required: false) }

@section PageStyles{ @RenderSection("PageStyles", required: false) }

@section VendorScripts{ @RenderSection("VendorScripts", required: false) }

@section PageScripts{ @RenderSection("PageScripts", required: false) }

@{
  bool isMenu = ViewData["isMenu"] != null && Convert.ToBoolean(ViewData["isMenu"]);
}

<div class='layout-wrapper layout-content-navbar @(isMenu ? "" : "layout-without-menu")'>
  <div class='layout-container'>

    @if (isMenu)
    {
      @await Html.PartialAsync("Sections/Menu/_VerticalMenu")
    }

    <!-- Layout page -->
    <div class="layout-page">
      <!-- Navbar -->
      @if (@ViewData["isNavbar"] != null && Convert.ToBoolean(@ViewData["isNavbar"]))
      {
        @await Html.PartialAsync("Sections/Navbar/_Navbar")
      }
      <!-- / Navbar -->


      <!-- Content wrapper -->
      <div class="content-wrapper">

        <!-- Content -->
        <div class='@ViewData["container"] @(Convert.ToBoolean(@ViewData["isFlex"]) ? "d-flex align-items-stretch flex-grow-1 p-0" : "flex-grow-1 container-p-y")'>
          @RenderBody()
        </div>
        <!-- / Content -->

        <!-- Footer -->
        @if (@ViewData["isFooter"] != null && Convert.ToBoolean(@ViewData["isFooter"]))
        {
          @await Html.PartialAsync("Sections/Footer/_Footer")
        }
        <!-- / Footer -->
        <div class="content-backdrop fade"></div>
      </div>
      <!--/ Content wrapper -->
    </div>
    <!-- / Layout page -->
  </div>

  <!-- Overlay -->
  @if (@ViewData["isMenu"] != null && Convert.ToBoolean(@ViewData["isMenu"]))
  {
    <div class="layout-overlay layout-menu-toggle"></div>
  }
  <!-- Drag Target Area To SlideIn Menu On Small Screens -->
  <div class="drag-target"></div>
	<script type="module">
		import Chatbot from "https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js"
		Chatbot.init({
			chatflowid: "d251ac2b-59bc-4376-aceb-1c2bc50fc740",
			apiHost: "https://app.station-ai.ir",
			chatflowConfig: {
				/* Chatflow Config */
			},
			observersConfig: {
				/* Observers Config */
			},
			theme: {
				button: {
					backgroundColor: '#3B81F6',
					right: 20,
					bottom: 20,
					size: 48,
					dragAndDrop: true,
					iconColor: 'white',
					customIconSrc: 'https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg',
					autoWindowOpen: {
						autoOpen: false,
						openDelay: 2,
						autoOpenOnMobile: false
					}
				},
				tooltip: {
						showTooltip: true,
					tooltipMessage: 'سلام من اینجام👋!',
					tooltipBackgroundColor: 'black',
					tooltipTextColor: 'white',
					tooltipFontSize: 16
				},
				customCSS: ``,
				chatWindow: {
					 showTitle: true,
					showAgentMessages: true,
					title: 'چت بات',
					titleAvatarSrc: 'https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg',
					welcomeMessage: 'سلام خوش آمدید',
					errorMessage: 'خطایی رخ داده',
					backgroundColor: '#ffffff',
					backgroundImage: 'مسیر یا لینک تصویر را بزارید',
					height: 600,
					width: 400,
					fontSize: 14,
					starterPrompts: [
						"بات چیست؟",
						"شما چه کسی هستید؟"
					],
					starterPromptFontSize: 15,
					clearChatOnReload: false,
					sourceDocsTitle: 'Sources:',
					renderHTML: true,
					botMessage: {
						backgroundColor: '#f7f8ff',
						textColor: '#303235',
						showAvatar: true,
						avatarSrc: 'https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png'
					},
					userMessage: {
						backgroundColor: '#3B81F6',
						textColor: '#ffffff',
						showAvatar: true,
						avatarSrc: 'https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png'
					},
					textInput: {
						 placeholder: 'سوال خود را بپرسید',
						backgroundColor: '#ffffff',
						textColor: '#303235',
						sendButtonColor: '#3B81F6',
						maxChars: 50,
						maxCharsWarningMessage: 'لطفا کمتر از 50 کاراکتر وارد کنید.',
						autoFocus: true,
						sendMessageSound: true,
						sendSoundLocation: 'send_message.mp3',
						receiveMessageSound: true,
						receiveSoundLocation: 'receive_message.mp3'
					},
					feedback: {
						color: '#303235'
					},
					dateTimeToggle: {
						date: true,
						time: true
					},
					footer: {
						 textColor: '#303235',
						text: 'تهیه شده توسط ',
						company: 'تیم توسعه',
						companyLink: 'https://station-ai.ir'
					}
				}
			}
		})
	</script>
